冒泡排序是一种简单的交换排序算法，其核心思想是通过相邻元素的比较与交换，将较大（或较小）的元素逐步“浮”到数列的末端，从而完成排序。具体流程如下：遍历比较：从数组的第一个元素开始，依次比较相邻的两个元素。若顺序错误（如升序排列时前一个元素更大），则交换它们的位置。
逐轮缩小范围：每一轮遍历后，当前未排序部分的最大元素会被移动到正确位置，因此下一轮只需处理剩余未排序部分。提前终止优化：若某一轮未发生任何交换，说明数组已完全有序，可提前终止排序。
代码：
def bubble_sort(arr):
    n = len(arr)
    for i in range(n-1):        # 外循环控制排序轮数（n-1轮）
        for j in range(n-1-i):  # 内循环处理每轮的比较交换
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
外循环：共执行 n-1 轮（n为数组长度），每轮确定一个最大值的位置。
内循环：每轮遍历未排序部分的元素，比较相邻元素并进行交换。
交换条件：若当前元素大于后一元素（升序），则交换两者位置 
时间复杂度
最优情况（数组已有序）：仅需一轮遍历（无交换），时间复杂度为 O(n) 
最坏情况（数组逆序）：需进行 n(n-1)/2 次比较和交换，时间复杂度为 O(n²)。
平均情况：时间复杂度仍为 O(n²)，因为大部分情况下需遍历多轮 
2. 空间复杂度
冒泡排序是原地排序算法，仅需常数级别的额外空间用于临时变量（如交换元素时的 temp），空间复杂度为 O(1) 

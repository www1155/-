希尔排序（Shell Sort）是插入排序的改进版本，核心思想是通过分组插入排序和缩小增量策略减少数据移动次数，提升排序效率。具体步骤分为两部分：
预排序：将数组按固定间隔（增量）分组，对每个子序列进行插入排序，使数组逐渐接近有序。
插入排序：当增量减至1时，进行最后一次插入排序，此时数组已基本有序，排序效率高
def shell_sort(arr):
    n = len(arr)
    gap = n // 2  # 初始增量取数组长度的一半
    while gap > 0:
        for i in range(gap, n):  # 对每个子序列执行插入排序
            temp = arr[i]
            j = i
            # 在子序列内向前比较并插入
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap = gap // 2  # 缩小增量（如减半）
    return arr
初始化增量：初始增量 gap 通常取数组长度的一半（如 n//2）。
外层循环：逐步缩小 gap，直到 gap = 1。
内层循环：
每次从 gap 位置开始遍历数组，将元素与其所在子序列的前驱元素比较。
若前驱元素更大，则向后移动，直到找到合适位置插入当前元素。
最终插入排序：当 gap = 1 时，退化为标准插入排序，完成最终排序
示例流程（数组 [8, 3, 1, 6, 0, 9, 4, 7, 2]）：
gap = 4：分组为 [8,0], [3,9], [1,4], [6,7], [0,2]，排序后数组接近局部有序。
gap = 2：分组更细，进一步调整元素位置。
gap = 1：最终插入排序，数组完全有序
时间复杂度分析
最优情况：数组接近有序时，时间复杂度接近 O(n)。
最坏情况：O(n²)（使用简单递减增量时） 
空间复杂度
空间复杂度为 O(1)
